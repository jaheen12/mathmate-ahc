name: Android CI - Build Signed APK

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-sign:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Create .env file from Secrets
        env:
          VITE_API_KEY: ${{ secrets.VITE_API_KEY }}
          VITE_AUTH_DOMAIN: ${{ secrets.VITE_AUTH_DOMAIN }}
          VITE_PROJECT_ID: ${{ secrets.VITE_PROJECT_ID }}
          VITE_STORAGE_BUCKET: ${{ secrets.VITE_STORAGE_BUCKET }}
          VITE_MESSAGING_SENDER_ID: ${{ secrets.VITE_MESSAGING_SENDER_ID }}
          VITE_APP_ID: ${{ secrets.VITE_APP_ID }}
          VITE_MEASUREMENT_ID: ${{ secrets.VITE_MEASUREMENT_ID }}
          TAILWIND_DISABLE_NATIVE_FS_WATCHER: true
        run: |
          echo "VITE_API_KEY=$VITE_API_KEY" >> .env
          echo "VITE_AUTH_DOMAIN=$VITE_AUTH_DOMAIN" >> .env
          echo "VITE_PROJECT_ID=$VITE_PROJECT_ID" >> .env
          echo "VITE_STORAGE_BUCKET=$VITE_STORAGE_BUCKET" >> .env
          echo "VITE_MESSAGING_SENDER_ID=$VITE_MESSAGING_SENDER_ID" >> .env
          echo "VITE_APP_ID=$VITE_APP_ID" >> .env
          echo "VITE_MEASUREMENT_ID=$VITE_MEASUREMENT_ID" >> .env
          echo "TAILWIND_DISABLE_NATIVE_FS_WATCHER=$TAILWIND_DISABLE_NATIVE_FS_WATCHER" >> .env
          echo "CI=false" >> .env
      
      - name: Build web assets
        run: npm run build

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install Capacitor CLI
        run: npm install -g @capacitor/cli

      - name: Add Android platform and Sync
        run: npx cap add android && npx cap sync android

      # --- SIGNING STEPS START HERE ---

      - name: Decode Keystore from Secret
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo "Decoding keystore..."
          # This creates the keystore file inside the android/app/ directory
          echo $ANDROID_KEYSTORE_BASE64 | base64 --decode > android/app/release.keystore
          echo "Keystore file created at android/app/release.keystore"

      - name: Create Keystore Properties File
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "Writing keystore.properties..."
          # This creates a file in the android/ directory
          echo "storePassword=${KEYSTORE_PASSWORD}" > android/keystore.properties
          echo "keyAlias=${KEY_ALIAS}" >> android/keystore.properties
          echo "keyPassword=${KEY_PASSWORD}" >> android/keystore.properties
          # This path is relative to the keystore.properties file, pointing to the keystore inside the app folder
          echo "storeFile=app/release.keystore" >> android/keystore.properties
          echo "Keystore properties file created at android/keystore.properties"

      # --- SIGNING STEPS END HERE ---
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        working-directory: ./android

      - name: Build Signed Android APK
        run: ./gradlew assembleRelease
        working-directory: ./android

      - name: List files in build output directory
        run: ls -R android/app/build/outputs/apk/release

      - name: Upload Signed APK
        uses: actions/upload-artifact@v4
        with:
          name: app-signed-release.apk
          path: android/app/build/outputs/apk/release/*.apk
          if-no-files-found: error